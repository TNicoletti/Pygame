
leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  00000422  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001036  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c10  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b51  00000000  00000000  0000218a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000c231  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b4  00000000  00000000  0000f0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000f55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003d52  00000000  00000000  0000f5ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8a c0       	rjmp	.+276    	; 0x11a <__bad_interrupt>
   6:	00 00       	nop
   8:	88 c0       	rjmp	.+272    	; 0x11a <__bad_interrupt>
   a:	00 00       	nop
   c:	86 c0       	rjmp	.+268    	; 0x11a <__bad_interrupt>
   e:	00 00       	nop
  10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
  12:	00 00       	nop
  14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
  16:	00 00       	nop
  18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7e c0       	rjmp	.+252    	; 0x11a <__bad_interrupt>
  1e:	00 00       	nop
  20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
  22:	00 00       	nop
  24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
  26:	00 00       	nop
  28:	78 c0       	rjmp	.+240    	; 0x11a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	76 c0       	rjmp	.+236    	; 0x11a <__bad_interrupt>
  2e:	00 00       	nop
  30:	74 c0       	rjmp	.+232    	; 0x11a <__bad_interrupt>
  32:	00 00       	nop
  34:	72 c0       	rjmp	.+228    	; 0x11a <__bad_interrupt>
  36:	00 00       	nop
  38:	70 c0       	rjmp	.+224    	; 0x11a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6e c0       	rjmp	.+220    	; 0x11a <__bad_interrupt>
  3e:	00 00       	nop
  40:	6c c0       	rjmp	.+216    	; 0x11a <__bad_interrupt>
  42:	00 00       	nop
  44:	6a c0       	rjmp	.+212    	; 0x11a <__bad_interrupt>
  46:	00 00       	nop
  48:	68 c0       	rjmp	.+208    	; 0x11a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	66 c0       	rjmp	.+204    	; 0x11a <__bad_interrupt>
  4e:	00 00       	nop
  50:	64 c0       	rjmp	.+200    	; 0x11a <__bad_interrupt>
  52:	00 00       	nop
  54:	62 c0       	rjmp	.+196    	; 0x11a <__bad_interrupt>
  56:	00 00       	nop
  58:	60 c0       	rjmp	.+192    	; 0x11a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	75 c0       	rjmp	.+234    	; 0x148 <__vector_23>
  5e:	00 00       	nop
  60:	5c c0       	rjmp	.+184    	; 0x11a <__bad_interrupt>
  62:	00 00       	nop
  64:	5a c0       	rjmp	.+180    	; 0x11a <__bad_interrupt>
  66:	00 00       	nop
  68:	58 c0       	rjmp	.+176    	; 0x11a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	56 c0       	rjmp	.+172    	; 0x11a <__bad_interrupt>
  6e:	00 00       	nop
  70:	54 c0       	rjmp	.+168    	; 0x11a <__bad_interrupt>
  72:	00 00       	nop
  74:	52 c0       	rjmp	.+164    	; 0x11a <__bad_interrupt>
  76:	00 00       	nop
  78:	50 c0       	rjmp	.+160    	; 0x11a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4e c0       	rjmp	.+156    	; 0x11a <__bad_interrupt>
  7e:	00 00       	nop
  80:	4c c0       	rjmp	.+152    	; 0x11a <__bad_interrupt>
  82:	00 00       	nop
  84:	4a c0       	rjmp	.+148    	; 0x11a <__bad_interrupt>
  86:	00 00       	nop
  88:	48 c0       	rjmp	.+144    	; 0x11a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	46 c0       	rjmp	.+140    	; 0x11a <__bad_interrupt>
  8e:	00 00       	nop
  90:	44 c0       	rjmp	.+136    	; 0x11a <__bad_interrupt>
  92:	00 00       	nop
  94:	42 c0       	rjmp	.+132    	; 0x11a <__bad_interrupt>
  96:	00 00       	nop
  98:	40 c0       	rjmp	.+128    	; 0x11a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3e c0       	rjmp	.+124    	; 0x11a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3c c0       	rjmp	.+120    	; 0x11a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3a c0       	rjmp	.+116    	; 0x11a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	38 c0       	rjmp	.+112    	; 0x11a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	dc 00       	.word	0x00dc	; ????
  ae:	de 00       	.word	0x00de	; ????
  b0:	e0 00       	.word	0x00e0	; ????
  b2:	e2 00       	.word	0x00e2	; ????
  b4:	e4 00       	.word	0x00e4	; ????
  b6:	e6 00       	.word	0x00e6	; ????
  b8:	e8 00       	.word	0x00e8	; ????
  ba:	ea 00       	.word	0x00ea	; ????
  bc:	ec 00       	.word	0x00ec	; ????
  be:	ee 00       	.word	0x00ee	; ????
  c0:	f0 00       	.word	0x00f0	; ????
  c2:	f2 00       	.word	0x00f2	; ????
  c4:	f4 00       	.word	0x00f4	; ????
  c6:	f6 00       	.word	0x00f6	; ????
  c8:	01 01       	movw	r0, r2
  ca:	03 01       	movw	r0, r6
  cc:	05 01       	movw	r0, r10
  ce:	07 01       	movw	r0, r14
  d0:	09 01       	movw	r0, r18
  d2:	0b 01       	movw	r0, r22
  d4:	0d 01       	movw	r0, r26
  d6:	0f 01       	movw	r0, r30
  d8:	11 01       	movw	r2, r2
  da:	13 01       	movw	r2, r6
  dc:	15 01       	movw	r2, r10
  de:	17 01       	movw	r2, r14
  e0:	19 01       	movw	r2, r18
  e2:	1b 01       	movw	r2, r22

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	da e0       	ldi	r29, 0x0A	; 10
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	11 e0       	ldi	r17, 0x01	; 1
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b1 e0       	ldi	r27, 0x01	; 1
  f6:	ec e8       	ldi	r30, 0x8C	; 140
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a2 30       	cpi	r26, 0x02	; 2
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	a2 e0       	ldi	r26, 0x02	; 2
 10a:	b1 e0       	ldi	r27, 0x01	; 1
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	ac 30       	cpi	r26, 0x0C	; 12
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	25 d1       	rcall	.+586    	; 0x362 <main>
 118:	37 c1       	rjmp	.+622    	; 0x388 <_exit>

0000011a <__bad_interrupt>:
 11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <IO_init>:
void Set_PWM_T1C(uint16_t valor){
   ICR1 = 0x03FF; // set the TOP value for the PWM to 0x3FF = 10bit
   TCCR1A |= (1<<COM1C1);
   TCCR1B = (1<< WGM13)|(1<< CS11)|(1<< CS10); //T=20ms com ICR=157 step 128us
   TCCR1C = 0;
   OCR1C  = valor; //inicializa PWM para saida em tensão = 0 Vcc 4mA
 11c:	8e ef       	ldi	r24, 0xFE	; 254
 11e:	84 b9       	out	0x04, r24	; 4
 120:	80 ec       	ldi	r24, 0xC0	; 192
 122:	87 b9       	out	0x07, r24	; 7
 124:	90 ed       	ldi	r25, 0xD0	; 208
 126:	9a b9       	out	0x0a, r25	; 10
 128:	1d b8       	out	0x0d, r1	; 13
 12a:	10 ba       	out	0x10, r1	; 16
 12c:	15 b8       	out	0x05, r1	; 5
 12e:	18 b8       	out	0x08, r1	; 8
 130:	93 e2       	ldi	r25, 0x23	; 35
 132:	9b b9       	out	0x0b, r25	; 11
 134:	94 e0       	ldi	r25, 0x04	; 4
 136:	9e b9       	out	0x0e, r25	; 14
 138:	81 bb       	out	0x11, r24	; 17
 13a:	85 b7       	in	r24, 0x35	; 53
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	85 bf       	out	0x35, r24	; 53
 140:	85 b7       	in	r24, 0x35	; 53
 142:	80 68       	ori	r24, 0x80	; 128
 144:	85 bf       	out	0x35, r24	; 53
 146:	08 95       	ret

00000148 <__vector_23>:
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
 15a:	89 ed       	ldi	r24, 0xD9	; 217
 15c:	86 bd       	out	0x26, r24	; 38
 15e:	e2 e0       	ldi	r30, 0x02	; 2
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	80 81       	ld	r24, Z
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	91 83       	std	Z+1, r25	; 0x01
 16a:	80 83       	st	Z, r24
 16c:	82 81       	ldd	r24, Z+2	; 0x02
 16e:	93 81       	ldd	r25, Z+3	; 0x03
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	93 83       	std	Z+3, r25	; 0x03
 174:	82 83       	std	Z+2, r24	; 0x02
 176:	84 81       	ldd	r24, Z+4	; 0x04
 178:	95 81       	ldd	r25, Z+5	; 0x05
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	95 83       	std	Z+5, r25	; 0x05
 17e:	84 83       	std	Z+4, r24	; 0x04
 180:	86 81       	ldd	r24, Z+6	; 0x06
 182:	97 81       	ldd	r25, Z+7	; 0x07
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	97 83       	std	Z+7, r25	; 0x07
 188:	86 83       	std	Z+6, r24	; 0x06
 18a:	80 85       	ldd	r24, Z+8	; 0x08
 18c:	91 85       	ldd	r25, Z+9	; 0x09
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	91 87       	std	Z+9, r25	; 0x09
 192:	80 87       	std	Z+8, r24	; 0x08
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <led_on>:
}

void led_on(unsigned char led){

	switch(led){
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	fc 01       	movw	r30, r24
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	ee 30       	cpi	r30, 0x0E	; 14
 1ae:	f1 05       	cpc	r31, r1
 1b0:	f0 f4       	brcc	.+60     	; 0x1ee <led_on+0x48>
 1b2:	ea 5a       	subi	r30, 0xAA	; 170
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	e2 c0       	rjmp	.+452    	; 0x37c <__tablejump2__>
		case 1: Liga_Strobe();
 1b8:	2f 9a       	sbi	0x05, 7	; 5
		break;
 1ba:	08 95       	ret
		case 2: Liga_Feed();
 1bc:	2b 9a       	sbi	0x05, 3	; 5
		break;
 1be:	08 95       	ret
		case 3: Liga_Sel_in();
 1c0:	29 9a       	sbi	0x05, 1	; 5
		break;
 1c2:	08 95       	ret
		case 4: Liga_Init();
 1c4:	2a 9a       	sbi	0x05, 2	; 5
		break;
 1c6:	08 95       	ret
		case 5: Liga_D0();
 1c8:	5c 9a       	sbi	0x0b, 4	; 11
		break;
 1ca:	08 95       	ret
		case 6: Liga_D1();
 1cc:	5e 9a       	sbi	0x0b, 6	; 11
		break;
 1ce:	08 95       	ret
		case 7: Liga_D2();
 1d0:	5f 9a       	sbi	0x0b, 7	; 11
		break;
 1d2:	08 95       	ret
		case 8: Liga_D3();
 1d4:	2c 9a       	sbi	0x05, 4	; 5
		break;
 1d6:	08 95       	ret
		case 9: Liga_D4();
 1d8:	2d 9a       	sbi	0x05, 5	; 5
		break;
 1da:	08 95       	ret
		case 10: Liga_D5();
 1dc:	2e 9a       	sbi	0x05, 6	; 5
		break;
 1de:	08 95       	ret
		case 11: Liga_D6();
 1e0:	46 9a       	sbi	0x08, 6	; 8
		break;
 1e2:	08 95       	ret
		case 12: Liga_D7();
 1e4:	47 9a       	sbi	0x08, 7	; 8
		break;
 1e6:	08 95       	ret
		case 13: Liga_LCD_RS();
 1e8:	28 9a       	sbi	0x05, 0	; 5
		break;
 1ea:	08 95       	ret
		case 14: Liga_LCD_E();
 1ec:	76 9a       	sbi	0x0e, 6	; 14
 1ee:	08 95       	ret

000001f0 <led_off>:
	}
}

void led_off(unsigned char led){

	switch(led){
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	ee 30       	cpi	r30, 0x0E	; 14
 1f8:	f1 05       	cpc	r31, r1
 1fa:	f0 f4       	brcc	.+60     	; 0x238 <led_off+0x48>
 1fc:	ec 59       	subi	r30, 0x9C	; 156
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	bd c0       	rjmp	.+378    	; 0x37c <__tablejump2__>
		case 1: Desliga_Strobe();
 202:	2f 98       	cbi	0x05, 7	; 5
		break;
 204:	08 95       	ret
		case 2: Desliga_Feed();
 206:	2b 98       	cbi	0x05, 3	; 5
		break;
 208:	08 95       	ret
		case 3: Desliga_Sel_in();
 20a:	29 98       	cbi	0x05, 1	; 5
		break;
 20c:	08 95       	ret
		case 4: Desliga_Init();
 20e:	2a 98       	cbi	0x05, 2	; 5
		break;
 210:	08 95       	ret
		case 5: Desliga_D0();
 212:	5c 98       	cbi	0x0b, 4	; 11
		break;
 214:	08 95       	ret
		case 6: Desliga_D1();
 216:	5e 98       	cbi	0x0b, 6	; 11
		break;
 218:	08 95       	ret
		case 7: Desliga_D2();
 21a:	5f 98       	cbi	0x0b, 7	; 11
		break;
 21c:	08 95       	ret
		case 8: Desliga_D3();
 21e:	2c 98       	cbi	0x05, 4	; 5
		break;
 220:	08 95       	ret
		case 9: Desliga_D4();
 222:	2d 98       	cbi	0x05, 5	; 5
		break;
 224:	08 95       	ret
		case 10: Desliga_D5();
 226:	2e 98       	cbi	0x05, 6	; 5
		break;
 228:	08 95       	ret
		case 11: Desliga_D6();
 22a:	46 98       	cbi	0x08, 6	; 8
		break;
 22c:	08 95       	ret
		case 12: Desliga_D7();
 22e:	47 98       	cbi	0x08, 7	; 8
		break;
 230:	08 95       	ret
		case 13: Desliga_LCD_RS();
 232:	28 98       	cbi	0x05, 0	; 5
		break;
 234:	08 95       	ret
		case 14: Desliga_LCD_E();
 236:	76 98       	cbi	0x0e, 6	; 14
 238:	08 95       	ret

0000023a <turnOnOffLed>:
}

///////////////////////////////////////////

void turnOnOffLed(unsigned char number, char on) {
	if (on)
 23a:	66 23       	and	r22, r22
 23c:	11 f0       	breq	.+4      	; 0x242 <turnOnOffLed+0x8>
		led_on(number);
 23e:	b3 cf       	rjmp	.-154    	; 0x1a6 <led_on>
 240:	08 95       	ret
	else
		led_off(number);
 242:	d6 cf       	rjmp	.-84     	; 0x1f0 <led_off>
 244:	08 95       	ret

00000246 <blinkLedsSequence>:
 246:	cf 93       	push	r28

unsigned char numberOfLeds = 14;

#define sleepTimeSequence 250
void blinkLedsSequence() {
	for (unsigned char led=1; led<=numberOfLeds; led++) {
 248:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 24c:	88 23       	and	r24, r24
 24e:	a9 f0       	breq	.+42     	; 0x27a <blinkLedsSequence+0x34>
 250:	c1 e0       	ldi	r28, 0x01	; 1
		turnOnOffLed(led, 1);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	8c 2f       	mov	r24, r28
 256:	f1 df       	rcall	.-30     	; 0x23a <turnOnOffLed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	2f e7       	ldi	r18, 0x7F	; 127
 25a:	8a e1       	ldi	r24, 0x1A	; 26
 25c:	96 e0       	ldi	r25, 0x06	; 6
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <blinkLedsSequence+0x18>
 266:	00 c0       	rjmp	.+0      	; 0x268 <blinkLedsSequence+0x22>
 268:	00 00       	nop
		_delay_ms(sleepTimeSequence);
		turnOnOffLed(led, 0);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	8c 2f       	mov	r24, r28
 26e:	e5 df       	rcall	.-54     	; 0x23a <turnOnOffLed>

unsigned char numberOfLeds = 14;

#define sleepTimeSequence 250
void blinkLedsSequence() {
	for (unsigned char led=1; led<=numberOfLeds; led++) {
 270:	cf 5f       	subi	r28, 0xFF	; 255
 272:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 276:	8c 17       	cp	r24, r28
 278:	60 f7       	brcc	.-40     	; 0x252 <blinkLedsSequence+0xc>
		turnOnOffLed(led, 1);
		_delay_ms(sleepTimeSequence);
		turnOnOffLed(led, 0);
	}
}
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <auxBlindLedsEvenOdd>:
		auxBlindLedsEvenOdd(even, 0);
		even = !even;
		timePassedSeconds += 2*sleepTimeEvenOdd;
	}
}
void auxBlindLedsEvenOdd(char even, char ledsOn) {
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
	for (unsigned char led=1; led<=numberOfLeds; led++)
 28c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 290:	99 23       	and	r25, r25
 292:	b1 f0       	breq	.+44     	; 0x2c0 <auxBlindLedsEvenOdd+0x42>
 294:	d6 2e       	mov	r13, r22
 296:	c1 e0       	ldi	r28, 0x01	; 1
		if ((led%2==0)==even)
 298:	d1 e0       	ldi	r29, 0x01	; 1
 29a:	e8 2e       	mov	r14, r24
 29c:	88 0f       	add	r24, r24
 29e:	ff 08       	sbc	r15, r15
 2a0:	9c 2f       	mov	r25, r28
 2a2:	9d 27       	eor	r25, r29
 2a4:	09 2f       	mov	r16, r25
 2a6:	01 70       	andi	r16, 0x01	; 1
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	0e 15       	cp	r16, r14
 2ac:	1f 05       	cpc	r17, r15
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <auxBlindLedsEvenOdd+0x38>
			turnOnOffLed(led, ledsOn);
 2b0:	6d 2d       	mov	r22, r13
 2b2:	8c 2f       	mov	r24, r28
 2b4:	c2 df       	rcall	.-124    	; 0x23a <turnOnOffLed>
		even = !even;
		timePassedSeconds += 2*sleepTimeEvenOdd;
	}
}
void auxBlindLedsEvenOdd(char even, char ledsOn) {
	for (unsigned char led=1; led<=numberOfLeds; led++)
 2b6:	cf 5f       	subi	r28, 0xFF	; 255
 2b8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 2bc:	9c 17       	cp	r25, r28
 2be:	80 f7       	brcc	.-32     	; 0x2a0 <auxBlindLedsEvenOdd+0x22>
 2c0:	2f e7       	ldi	r18, 0x7F	; 127
 2c2:	8a e1       	ldi	r24, 0x1A	; 26
 2c4:	96 e0       	ldi	r25, 0x06	; 6
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <auxBlindLedsEvenOdd+0x48>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <auxBlindLedsEvenOdd+0x52>
 2d0:	00 00       	nop
		if ((led%2==0)==even)
			turnOnOffLed(led, ledsOn);
	_delay_ms(sleepTimeEvenOdd);
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	08 95       	ret

000002e2 <blindLedsEvenOdd>:
	}
}

#define sleepTimeEvenOdd 250
#define overallTimeEvenOdd 3000
void blindLedsEvenOdd() {
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	06 e0       	ldi	r16, 0x06	; 6
 2ea:	10 e0       	ldi	r17, 0x00	; 0
	float timePassedSeconds = 0;
	char even = 1;
 2ec:	c1 e0       	ldi	r28, 0x01	; 1
	while (timePassedSeconds < overallTimeEvenOdd) {
		auxBlindLedsEvenOdd(even, 1);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	8c 2f       	mov	r24, r28
 2f2:	c5 df       	rcall	.-118    	; 0x27e <auxBlindLedsEvenOdd>
		auxBlindLedsEvenOdd(even, 0);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	8c 2f       	mov	r24, r28
 2f8:	c2 df       	rcall	.-124    	; 0x27e <auxBlindLedsEvenOdd>
		even = !even;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	c1 11       	cpse	r28, r1
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	c8 2f       	mov	r28, r24
 302:	01 50       	subi	r16, 0x01	; 1
 304:	11 09       	sbc	r17, r1
#define sleepTimeEvenOdd 250
#define overallTimeEvenOdd 3000
void blindLedsEvenOdd() {
	float timePassedSeconds = 0;
	char even = 1;
	while (timePassedSeconds < overallTimeEvenOdd) {
 306:	99 f7       	brne	.-26     	; 0x2ee <blindLedsEvenOdd+0xc>
		auxBlindLedsEvenOdd(even, 1);
		auxBlindLedsEvenOdd(even, 0);
		even = !even;
		timePassedSeconds += 2*sleepTimeEvenOdd;
	}
}
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <auxBlinkLeds>:
		auxBlinkLeds(1);
		auxBlinkLeds(0);
		timePassedSeconds += 2*sleepTimeSimple;
	}
}
void auxBlinkLeds(char ledsOn) {
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
	for (unsigned char led=1; led<=numberOfLeds; led++)
 314:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 318:	99 23       	and	r25, r25
 31a:	51 f0       	breq	.+20     	; 0x330 <auxBlinkLeds+0x20>
 31c:	d8 2f       	mov	r29, r24
 31e:	c1 e0       	ldi	r28, 0x01	; 1
		turnOnOffLed(led, ledsOn);
 320:	6d 2f       	mov	r22, r29
 322:	8c 2f       	mov	r24, r28
 324:	8a df       	rcall	.-236    	; 0x23a <turnOnOffLed>
		auxBlinkLeds(0);
		timePassedSeconds += 2*sleepTimeSimple;
	}
}
void auxBlinkLeds(char ledsOn) {
	for (unsigned char led=1; led<=numberOfLeds; led++)
 326:	cf 5f       	subi	r28, 0xFF	; 255
 328:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 32c:	9c 17       	cp	r25, r28
 32e:	c0 f7       	brcc	.-16     	; 0x320 <auxBlinkLeds+0x10>
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	84 e3       	ldi	r24, 0x34	; 52
 334:	9c e0       	ldi	r25, 0x0C	; 12
 336:	21 50       	subi	r18, 0x01	; 1
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	90 40       	sbci	r25, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <auxBlinkLeds+0x26>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <auxBlinkLeds+0x30>
 340:	00 00       	nop
		turnOnOffLed(led, ledsOn);
	_delay_ms(sleepTimeSimple);
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <blinkLeds>:
	_delay_ms(sleepTimeEvenOdd);
}

#define sleepTimeSimple 500
#define overallTimeSimple 3000
void blinkLeds() {
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	c3 e0       	ldi	r28, 0x03	; 3
 34e:	d0 e0       	ldi	r29, 0x00	; 0
	float timePassedSeconds = 0;
	while (timePassedSeconds < overallTimeSimple) {
		auxBlinkLeds(1);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	de df       	rcall	.-68     	; 0x310 <auxBlinkLeds>
		auxBlinkLeds(0);
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	dc df       	rcall	.-72     	; 0x310 <auxBlinkLeds>
 358:	21 97       	sbiw	r28, 0x01	; 1

#define sleepTimeSimple 500
#define overallTimeSimple 3000
void blinkLeds() {
	float timePassedSeconds = 0;
	while (timePassedSeconds < overallTimeSimple) {
 35a:	d1 f7       	brne	.-12     	; 0x350 <blinkLeds+0x8>
		auxBlinkLeds(1);
		auxBlinkLeds(0);
		timePassedSeconds += 2*sleepTimeSimple;
	}
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <main>:
const int pin1 = 7;
const int pin2 = 8;
const int pin3 = 4;

int main() {
	IO_init();
 362:	dc de       	rcall	.-584    	; 0x11c <IO_init>
	
	while (1) {
		if (Ch_ack_lig)
 364:	49 99       	sbic	0x09, 1	; 9
			blinkLeds();
 366:	02 c0       	rjmp	.+4      	; 0x36c <main+0xa>
 368:	ef df       	rcall	.-34     	; 0x348 <blinkLeds>
 36a:	fc cf       	rjmp	.-8      	; 0x364 <main+0x2>
		else if (Ch_busy_lig)
 36c:	4d 99       	sbic	0x09, 5	; 9
			blindLedsEvenOdd();
 36e:	02 c0       	rjmp	.+4      	; 0x374 <main+0x12>
 370:	b8 df       	rcall	.-144    	; 0x2e2 <blindLedsEvenOdd>
		else if (Ch_error_lig)
 372:	f8 cf       	rjmp	.-16     	; 0x364 <main+0x2>
 374:	48 99       	sbic	0x09, 0	; 9
			blinkLedsSequence();
 376:	f6 cf       	rjmp	.-20     	; 0x364 <main+0x2>
 378:	66 df       	rcall	.-308    	; 0x246 <blinkLedsSequence>
 37a:	f4 cf       	rjmp	.-24     	; 0x364 <main+0x2>

0000037c <__tablejump2__>:
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	05 90       	lpm	r0, Z+
 382:	f4 91       	lpm	r31, Z
 384:	e0 2d       	mov	r30, r0
 386:	09 94       	ijmp

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
